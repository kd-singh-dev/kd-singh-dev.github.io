import { Observer, State, ObserverKey, SubscriptionContainer, IngestConfigInterface, StateRuntimeJob, CreateStateRuntimeJobConfigInterface } from '../internal';
export declare class StateObserver<ValueType = any> extends Observer {
    state: () => State<ValueType>;
    nextStateValue: ValueType;
    /**
     * @internal
     * State Observer - Handles State changes, dependencies (-> Interface to Runtime)
     * @param state - State
     * @param config - Config
     */
    constructor(state: State<ValueType>, config?: CreateStateObserverConfigInterface);
    /**
     * @internal
     * Ingests nextStateValue or computedValue into Runtime and applies it to the State
     * @param config - Config
     */
    ingest(config?: StateIngestConfigInterface): void;
    /**
     * @internal
     * Ingests new State Value into Runtime and applies it to the State
     * @param newStateValue - New Value of the State
     * @param config - Config
     */
    ingestValue(newStateValue: ValueType, config?: StateIngestConfigInterface): void;
    /**
     * @internal
     * Performs Job that holds this Observer
     * @param job - Job
     */
    perform(job: StateRuntimeJob): void;
    /**
     * @internal
     * SideEffects of Job
     * @param job - Job
     */
    sideEffects(job: StateRuntimeJob): void;
}
/**
 * @param dependents - Initial Dependents of State Observer
 * @param subs - Initial Subscriptions of State Observer
 * @param key - Key/Name of State Observer
 */
export interface CreateStateObserverConfigInterface {
    dependents?: Array<Observer>;
    subs?: Array<SubscriptionContainer>;
    key?: ObserverKey;
}
export interface StateIngestConfigInterface extends CreateStateRuntimeJobConfigInterface, IngestConfigInterface {
}
