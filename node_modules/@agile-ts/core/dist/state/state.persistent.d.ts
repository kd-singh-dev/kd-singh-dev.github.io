import { CreatePersistentConfigInterface, Persistent, PersistentKey, State, StorageKey } from '../internal';
export declare class StatePersistent<ValueType = any> extends Persistent {
    static storeValueSideEffectKey: string;
    state: () => State;
    /**
     * @internal
     * State Persist Manager - Handles permanent storing of State Value
     * @param state - State that gets stored
     * @param config - Config
     */
    constructor(state: State<ValueType>, config?: CreatePersistentConfigInterface);
    /**
     * @internal
     * Updates Key/Name of Persistent
     * @param value - New Key/Name of Persistent
     */
    setKey(value?: StorageKey): Promise<void>;
    /**
     * @internal
     * Loads/Saves Storage Value for the first Time
     */
    initialLoading(): Promise<void>;
    /**
     * @internal
     * Loads State Value from the Storage
     * @param storageKey - Prefix Key of Persisted Instances (default PersistentKey)
     * @return Success?
     */
    loadPersistedValue(storageKey?: PersistentKey): Promise<boolean>;
    /**
     * @internal
     * Sets everything up so that the State gets saved in the Storage on every Value change
     * @param storageKey - Prefix Key of Persisted Instances (default PersistentKey)
     * @return Success?
     */
    persistValue(storageKey?: PersistentKey): Promise<boolean>;
    /**
     * @internal
     * Removes State Value form the Storage
     * @param storageKey - Prefix Key of Persisted Instances (default PersistentKey)
     * @return Success?
     */
    removePersistedValue(storageKey?: PersistentKey): Promise<boolean>;
    /**
     * @internal
     * Formats Storage Key
     * @param key - Key that gets formatted
     */
    formatKey(key?: PersistentKey): PersistentKey | undefined;
    /**
     * @internal
     * Rebuilds Storage depending on the State Value (Saves current State Value into the Storage)
     * @param state - State that holds the new Value
     * @param storageKey - StorageKey where value should be persisted
     * @param config - Config
     */
    rebuildStorageSideEffect(state: State<ValueType>, storageKey: PersistentKey, config?: {
        [key: string]: any;
    }): void;
}
