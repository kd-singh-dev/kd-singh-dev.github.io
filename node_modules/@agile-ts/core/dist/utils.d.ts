import { Agile, Observer } from './internal';
/**
 * @internal
 * Tries to get an Instance of Agile from provided Instance
 * If no agileInstance found it returns the global bound Agile Instance
 * @param instance - Instance that might hold an Agile Instance
 */
export declare function getAgileInstance(instance: any): Agile | undefined;
/**
 * @private
 * Extract Observers from specific Instances
 * @param instances - Instances that will be formatted
 */
export declare function extractObservers(instances: any): Array<Observer | undefined>;
/**
 * @internal
 * Binds passed Instance globally at passed Key
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
 * https://blog.logrocket.com/what-is-globalthis-why-use-it/
 * @param key - Key/Name of Instance
 * @param instance - Instance
 * @param overwrite - If already existing instance at passed Key gets overwritten
 */
export declare function globalBind(key: string, instance: any, overwrite?: boolean): boolean;
