import { Agile } from '../internal';
export declare class Integration<F = any, C = any> {
    _key: IntegrationKey;
    frameworkInstance?: F;
    ready: boolean;
    integrated: boolean;
    methods: IntegrationMethods<C>;
    /**
     * @public
     * Integration - Represents a Framework/Integration of Agile
     * @param config - Config
     */
    constructor(config: CreateIntegrationConfig<F, C>);
    /**
     * @public
     * Set Value of Integration
     */
    set key(key: IntegrationKey);
    /**
     * @public
     * Get Value of Integration
     */
    get key(): IntegrationKey;
}
/**
 * @param key - Key/Name of Integration
 * @param frameworkInstance - An Instance of the Framework that this Integration represents (for instance React)
 */
export interface CreateIntegrationConfig<F = any, C = any> extends IntegrationMethods<C> {
    key: string;
    frameworkInstance?: F;
}
/**
 * @param bind - Binds the Framework/Integration to Agile | Will be called after a successful integration
 * @param updateMethod - Will be called if a Observer updates his subs (Only in Component based Subscriptions!)
 */
export interface IntegrationMethods<C = any> {
    bind?: (agileInstance: Agile) => Promise<boolean>;
    updateMethod?: (componentInstance: C, updatedData: Object) => void;
}
export declare type IntegrationKey = string | number;
