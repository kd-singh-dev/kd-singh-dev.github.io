"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Integrations = void 0;
const internal_1 = require("../internal");
class Integrations {
    constructor(agileInstance) {
        this.integrations = new Set();
        this.agileInstance = () => agileInstance;
        internal_1.Agile.initialIntegrations.forEach((integration) => this.integrate(integration));
    }
    integrate(integration) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!integration._key) {
                internal_1.Agile.logger.error('Failed to integrate framework! Invalid Integration!', integration._key);
                return false;
            }
            if (integration.methods.bind)
                integration.ready = yield integration.methods.bind(this.agileInstance());
            else
                integration.ready = true;
            this.integrations.add(integration);
            integration.integrated = true;
            internal_1.Agile.logger.success(`Integrated '${integration._key}' into AgileTs`);
            return true;
        });
    }
    update(componentInstance, updatedData) {
        this.integrations.forEach((integration) => {
            if (!integration.ready) {
                internal_1.Agile.logger.warn(`Integration '${integration.key}' isn't ready yet!`);
                return;
            }
            if (integration.methods.updateMethod)
                integration.methods.updateMethod(componentInstance, updatedData);
        });
    }
    hasIntegration() {
        return this.integrations.size > 0;
    }
}
exports.Integrations = Integrations;
