import { Collection, CollectionKey, CreatePersistentConfigInterface, DefaultItem, Group, GroupKey, ItemKey, Persistent, PersistentKey, StorageKey } from '../internal';
export declare class CollectionPersistent<DataType extends object = DefaultItem> extends Persistent {
    collection: () => Collection<DataType>;
    static defaultGroupSideEffectKey: string;
    static storageItemKeyPattern: string;
    static storageGroupKeyPattern: string;
    /**
     * @internal
     * Collection Persist Manager - Handles permanent storing of Collection Value
     * @param collection - Collection that gets stored
     * @param config - Config
     */
    constructor(collection: Collection<DataType>, config?: CreatePersistentConfigInterface);
    /**
     * @internal
     * Updates Key/Name of Persistent
     * @param value - New Key/Name of Persistent
     */
    setKey(value?: StorageKey): Promise<void>;
    /**
     * @internal
     * Loads/Saves Storage Value for the first Time
     */
    initialLoading(): Promise<void>;
    /**
     * @internal
     * Loads Collection from Storage
     * @param storageKey - Prefix Key of Persisted Instances (default PersistentKey)
     * @return Success?
     */
    loadPersistedValue(storageKey?: PersistentKey): Promise<boolean>;
    /**
     * @internal
     * Sets everything up so that the Collection gets saved in the Storage
     * @param storageKey - Prefix Key of Persisted Instances (default PersistentKey)
     * @return Success?
     */
    persistValue(storageKey?: PersistentKey): Promise<boolean>;
    /**
     * @internal
     * Removes Collection from the Storage
     * @param storageKey - Prefix Key of Persisted Instances (default PersistentKey)
     * @return Success?
     */
    removePersistedValue(storageKey?: PersistentKey): Promise<boolean>;
    /**
     * @internal
     * Formats Storage Key
     * @param key - Key that gets formatted
     */
    formatKey(key?: StorageKey): StorageKey | undefined;
    /**
     * @internal
     * Rebuilds Storage depending on Group
     * @param group - Group
     * @param key - Prefix Key of Persisted Instances (default PersistentKey)
     */
    rebuildStorageSideEffect(group: Group<DataType>, key?: PersistentKey): void;
    /**
     * @internal
     * Build Item StorageKey with Collection Persist Pattern
     * @param itemKey - Key of Item
     * @param collectionKey - Key of Collection
     */
    static getItemStorageKey(itemKey?: ItemKey, collectionKey?: CollectionKey): string;
    /**
     * @internal
     * Build Group StorageKey with Collection Persist Pattern
     * @param groupKey - Key of Group
     * @param collectionKey - Key of Collection
     */
    static getGroupStorageKey(groupKey?: GroupKey, collectionKey?: CollectionKey): string;
}
