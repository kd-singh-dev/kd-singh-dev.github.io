import { Collection, DefaultItem, Item, ItemKey, State, StateRuntimeJobConfigInterface } from '../internal';
export declare class Selector<DataType extends object = DefaultItem> extends State<DataType | undefined> {
    static dummyItemKey: string;
    static rebuildSelectorSideEffectKey: string;
    static rebuildItemSideEffectKey: string;
    collection: () => Collection<DataType>;
    item: Item<DataType> | undefined;
    _itemKey: ItemKey;
    /**
     * @public
     * Represents Item of Collection
     * @param collection - Collection that contains the Item
     * @param itemKey - ItemKey of Item that the Selector represents
     * @param config - Config
     */
    constructor(collection: Collection<DataType>, itemKey: ItemKey, config?: SelectorConfigInterface);
    /**
     * @public
     * Set ItemKey that the Selector represents
     */
    set itemKey(value: ItemKey);
    /**
     * @public
     * Get ItemKey that the Selector represents
     */
    get itemKey(): ItemKey;
    /**
     * @public
     * Select new ItemKey
     * @param itemKey - New ItemKey
     * @param config - Config
     */
    select(itemKey: ItemKey, config?: StateRuntimeJobConfigInterface): this;
    /**
     * @public
     * Unselects current selected Item
     * @param config - Config
     */
    unselect(config?: StateRuntimeJobConfigInterface): this;
    /**
     * Checks if Selector has selected passed ItemKey
     * @param itemKey - ItemKey
     */
    hasSelected(itemKey: ItemKey): boolean;
    /**
     * @public
     * Rebuilds Selector
     * @param config - Config
     */
    rebuildSelector(config?: StateRuntimeJobConfigInterface): this;
}
export declare type SelectorKey = string | number;
/**
 * @param key - Key/Name of Selector
 * @param isPlaceholder - If Selector is initially a Placeholder
 */
export interface SelectorConfigInterface {
    key?: SelectorKey;
    isPlaceholder?: boolean;
}
