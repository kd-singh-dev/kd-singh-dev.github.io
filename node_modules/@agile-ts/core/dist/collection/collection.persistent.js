"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionPersistent = void 0;
const internal_1 = require("../internal");
class CollectionPersistent extends internal_1.Persistent {
    constructor(collection, config = {}) {
        super(collection.agileInstance(), {
            instantiate: false,
        });
        config = internal_1.defineConfig(config, {
            instantiate: true,
            storageKeys: [],
            defaultStorageKey: null,
        });
        this.collection = () => collection;
        this.instantiatePersistent({
            key: config.key,
            storageKeys: config.storageKeys,
            defaultStorageKey: config.defaultStorageKey,
        });
        if (this.ready && config.instantiate)
            this.initialLoading();
    }
    setKey(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const oldKey = this._key;
            const wasReady = this.ready;
            if (value === this._key)
                return;
            this._key = value || internal_1.Persistent.placeHolderKey;
            const isValid = this.validatePersistent();
            if (!wasReady) {
                if (isValid)
                    yield this.initialLoading();
                return;
            }
            yield this.removePersistedValue(oldKey);
            if (isValid)
                yield this.persistValue(value);
        });
    }
    initialLoading() {
        const _super = Object.create(null, {
            initialLoading: { get: () => super.initialLoading }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.initialLoading.call(this).then(() => {
                this.collection().isPersisted = true;
            });
        });
    }
    loadPersistedValue(storageKey) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.ready)
                return false;
            const _storageKey = storageKey || this._key;
            const isPersisted = yield this.agileInstance().storages.get(_storageKey, this.config.defaultStorageKey);
            if (!isPersisted)
                return false;
            const loadValuesIntoCollection = () => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                const defaultGroup = this.collection().getGroup(this.collection().config.defaultGroupKey);
                if (!defaultGroup)
                    return false;
                defaultGroup.persist({
                    loadValue: false,
                    followCollectionPersistKeyPattern: true,
                });
                if ((_a = defaultGroup.persistent) === null || _a === void 0 ? void 0 : _a.ready) {
                    yield ((_b = defaultGroup.persistent) === null || _b === void 0 ? void 0 : _b.initialLoading());
                    defaultGroup.isPersisted = true;
                }
                for (const itemKey of defaultGroup._value) {
                    const itemStorageKey = CollectionPersistent.getItemStorageKey(itemKey, _storageKey);
                    const storageValue = yield this.agileInstance().storages.get(itemStorageKey, this.config.defaultStorageKey);
                    if (!storageValue)
                        continue;
                    this.collection().collect(storageValue);
                }
                return true;
            });
            const success = yield loadValuesIntoCollection();
            if (success)
                yield this.persistValue(_storageKey);
            return success;
        });
    }
    persistValue(storageKey) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.ready)
                return false;
            const _storageKey = storageKey || this._key;
            const defaultGroup = this.collection().getGroup(this.collection().config.defaultGroupKey);
            if (!defaultGroup)
                return false;
            this.agileInstance().storages.set(_storageKey, true, this.storageKeys);
            if (!defaultGroup.isPersisted)
                defaultGroup.persist({ followCollectionPersistKeyPattern: true });
            defaultGroup.addSideEffect(CollectionPersistent.defaultGroupSideEffectKey, () => this.rebuildStorageSideEffect(defaultGroup, _storageKey), { weight: 0 });
            for (const itemKey of defaultGroup._value) {
                const item = this.collection().getItem(itemKey);
                const itemStorageKey = CollectionPersistent.getItemStorageKey(itemKey, _storageKey);
                item === null || item === void 0 ? void 0 : item.persist(itemStorageKey);
            }
            this.isPersisted = true;
            return true;
        });
    }
    removePersistedValue(storageKey) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.ready)
                return false;
            const _storageKey = storageKey || this._key;
            const defaultGroup = this.collection().getGroup(this.collection().config.defaultGroupKey);
            if (!defaultGroup)
                return false;
            this.agileInstance().storages.remove(_storageKey, this.storageKeys);
            (_a = defaultGroup.persistent) === null || _a === void 0 ? void 0 : _a.removePersistedValue();
            defaultGroup.removeSideEffect(CollectionPersistent.defaultGroupSideEffectKey);
            for (const itemKey of defaultGroup._value) {
                const item = this.collection().getItem(itemKey);
                (_b = item === null || item === void 0 ? void 0 : item.persistent) === null || _b === void 0 ? void 0 : _b.removePersistedValue();
            }
            this.isPersisted = false;
            return true;
        });
    }
    formatKey(key) {
        const collection = this.collection();
        if (!key && collection._key)
            return collection._key;
        if (!key)
            return;
        if (!collection._key)
            collection._key = key;
        return key;
    }
    rebuildStorageSideEffect(group, key) {
        var _a;
        const collection = group.collection();
        const _key = key || ((_a = collection.persistent) === null || _a === void 0 ? void 0 : _a._key);
        if (group.previousStateValue.length === group._value.length)
            return;
        const addedKeys = group._value.filter((key) => !group.previousStateValue.includes(key));
        const removedKeys = group.previousStateValue.filter((key) => !group._value.includes(key));
        addedKeys.forEach((itemKey) => {
            var _a;
            const item = collection.getItem(itemKey);
            const _itemKey = CollectionPersistent.getItemStorageKey(itemKey, _key);
            if (!item)
                return;
            if (!item.isPersisted)
                item.persist(_itemKey);
            else
                (_a = item.persistent) === null || _a === void 0 ? void 0 : _a.persistValue(_itemKey);
        });
        removedKeys.forEach((itemKey) => {
            var _a;
            const item = collection.getItem(itemKey);
            const _itemKey = CollectionPersistent.getItemStorageKey(itemKey, _key);
            if (!item)
                return;
            if (item.isPersisted)
                (_a = item.persistent) === null || _a === void 0 ? void 0 : _a.removePersistedValue(_itemKey);
        });
    }
    static getItemStorageKey(itemKey, collectionKey) {
        if (!itemKey || !collectionKey)
            internal_1.Agile.logger.warn('Failed to build unique Item StorageKey!');
        if (!itemKey)
            itemKey = 'unknown';
        if (!collectionKey)
            collectionKey = 'unknown';
        return this.storageItemKeyPattern
            .replace('${collectionKey}', collectionKey.toString())
            .replace('${itemKey}', itemKey.toString());
    }
    static getGroupStorageKey(groupKey, collectionKey) {
        if (!groupKey || !collectionKey)
            internal_1.Agile.logger.warn('Failed to build unique Group StorageKey!');
        if (!groupKey)
            groupKey = 'unknown';
        if (!collectionKey)
            collectionKey = 'unknown';
        return this.storageGroupKeyPattern
            .replace('${collectionKey}', collectionKey.toString())
            .replace('${groupKey}', groupKey.toString());
    }
}
exports.CollectionPersistent = CollectionPersistent;
CollectionPersistent.defaultGroupSideEffectKey = 'rebuildGroupStorageValue';
CollectionPersistent.storageItemKeyPattern = '_${collectionKey}_item_${itemKey}';
CollectionPersistent.storageGroupKeyPattern = '_${collectionKey}_group_${groupKey}';
