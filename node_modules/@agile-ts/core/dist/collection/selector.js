"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Selector = void 0;
const internal_1 = require("../internal");
class Selector extends internal_1.State {
    constructor(collection, itemKey, config = {}) {
        super(collection.agileInstance(), undefined, config);
        config = internal_1.defineConfig(config, {
            isPlaceholder: false,
        });
        this.collection = () => collection;
        this.item = undefined;
        this._itemKey = Selector.dummyItemKey;
        this._key = config === null || config === void 0 ? void 0 : config.key;
        this.isPlaceholder = true;
        if (!config.isPlaceholder)
            this.select(itemKey, { overwrite: true });
    }
    set itemKey(value) {
        this.select(value);
    }
    get itemKey() {
        return this._itemKey;
    }
    select(itemKey, config = {}) {
        const oldItem = this.collection().getItem(this._itemKey, {
            notExisting: true,
        });
        const newItem = this.collection().getItemWithReference(itemKey);
        config = internal_1.defineConfig(config, {
            background: false,
            sideEffects: {
                enabled: true,
                exclude: [],
            },
            force: false,
            overwrite: (oldItem === null || oldItem === void 0 ? void 0 : oldItem.isPlaceholder) || false,
            storage: true,
        });
        if (this.hasSelected(itemKey) && !config.force) {
            internal_1.Agile.logger.warn(`Selector has already selected '${itemKey}'!`);
            return this;
        }
        this.unselect({ background: true });
        this._itemKey = itemKey;
        this.item = newItem;
        newItem.isSelected = true;
        newItem.addSideEffect(Selector.rebuildSelectorSideEffectKey, (instance, config) => this.rebuildSelector(config), { weight: 100 });
        this.addSideEffect(Selector.rebuildItemSideEffectKey, (instance, config) => {
            var _a, _b;
            if (!((_a = instance.item) === null || _a === void 0 ? void 0 : _a.isPlaceholder))
                (_b = instance.item) === null || _b === void 0 ? void 0 : _b.set(instance._value, Object.assign(Object.assign({}, config), {
                    sideEffects: {
                        enabled: true,
                        exclude: [Selector.rebuildSelectorSideEffectKey],
                    },
                }));
        }, { weight: 90 });
        this.rebuildSelector(config);
        return this;
    }
    unselect(config = {}) {
        const item = this.collection().getItem(this._itemKey, {
            notExisting: true,
        });
        if (item) {
            item.isSelected = false;
            item.removeSideEffect(Selector.rebuildSelectorSideEffectKey);
            item.removeSideEffect(Selector.rebuildItemSideEffectKey);
            if (item.isPlaceholder)
                delete this.collection().data[this._itemKey];
        }
        this.item = undefined;
        this._itemKey = Selector.dummyItemKey;
        this.rebuildSelector(config);
        this.isPlaceholder = true;
        return this;
    }
    hasSelected(itemKey) {
        const isSelected = this._itemKey === itemKey;
        if (!this.item)
            return isSelected;
        return isSelected && this.item.isSelected;
    }
    rebuildSelector(config = {}) {
        if (!this.item || this.item.isPlaceholder) {
            this.set(undefined, config);
            return this;
        }
        this.set(this.item._value, config);
        return this;
    }
}
exports.Selector = Selector;
Selector.dummyItemKey = 'unknown';
Selector.rebuildSelectorSideEffectKey = 'rebuildSelector';
Selector.rebuildItemSideEffectKey = 'rebuildItem';
