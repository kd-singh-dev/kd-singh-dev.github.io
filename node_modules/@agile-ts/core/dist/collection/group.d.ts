import { State, Collection, DefaultItem, ItemKey, Item, StatePersistentConfigInterface, PersistentKey, StateRuntimeJobConfigInterface, StateIngestConfigInterface } from '../internal';
export declare class Group<DataType extends object = DefaultItem> extends State<Array<ItemKey>> {
    static rebuildGroupSideEffectKey: string;
    collection: () => Collection<DataType>;
    _output: Array<DataType>;
    _items: Array<() => Item<DataType>>;
    notFoundItemKeys: Array<ItemKey>;
    /**
     * @public
     * Group - Holds Items of Collection
     * @param collection - Collection to that the Group belongs
     * @param initialItems - Initial Key of Items in this Group
     * @param config - Config
     */
    constructor(collection: Collection<DataType>, initialItems?: Array<ItemKey>, config?: GroupConfigInterface);
    /**
     * @public
     * Get Item Values of Group
     */
    get output(): Array<DataType>;
    /**
     * @public
     * Set Item Values of Group
     */
    set output(value: DataType[]);
    /**
     * @public
     * Get Items of Group
     */
    get items(): Array<Item<DataType>>;
    /**
     * @public
     * Set Items of Group
     */
    set items(value: Array<Item<DataType>>);
    /**
     * @public
     * Checks if Group contains ItemKey
     * @param itemKey - ItemKey that gets checked
     */
    has(itemKey: ItemKey): boolean;
    /**
     * @public
     * Get size of Group (-> How many Items it contains)
     */
    get size(): number;
    /**
     * @public
     * Removes ItemKey/s from Group
     * @param itemKeys - ItemKey/s that get removed from Group
     * @param config - Config
     */
    remove(itemKeys: ItemKey | ItemKey[], config?: StateIngestConfigInterface): this;
    /**
     * @public
     * Adds ItemKey/s to Group
     * @param itemKeys - ItemKey/s that get added to the Group
     * @param config - Config
     */
    add(itemKeys: ItemKey | ItemKey[], config?: GroupAddConfigInterface): this;
    /**
     * @public
     * Replaces oldItemKey with newItemKey
     * @param oldItemKey - Old ItemKey
     * @param newItemKey - New ItemKey
     * @param config - Config
     */
    replace(oldItemKey: ItemKey, newItemKey: ItemKey, config?: StateRuntimeJobConfigInterface): this;
    /**
     * @public
     * Stores Group Value into Agile Storage permanently
     * @param config - Config
     */
    persist(config?: GroupPersistConfigInterface): this;
    /**
     * @public
     * Stores Group Value into Agile Storage permanently
     * @param key - Key/Name of created Persistent (Note: Key required if Group has no set Key!)
     * @param config - Config
     */
    persist(key?: PersistentKey, config?: GroupPersistConfigInterface): this;
    /**
     * @internal
     * Rebuilds Output and Items of Group
     */
    rebuild(): this;
}
export declare type GroupKey = string | number;
/**
 * @param method - Way of adding ItemKey to Group (push, unshift)
 * @param overwrite - If adding ItemKey overwrites old ItemKey (-> otherwise it gets added to the end of the Group)
 * @param background - If adding ItemKey happens in the background (-> not causing any rerender)
 */
export interface GroupAddConfigInterface extends StateIngestConfigInterface {
    method?: 'unshift' | 'push';
    overwrite?: boolean;
}
/**
 * @param background - If removing ItemKey happens in the background (-> not causing any rerender)
 */
export interface GroupRemoveConfigInterface {
    background?: boolean;
}
/**
 * @param key - Key/Name of Group
 * @param isPlaceholder - If Group is initially a Placeholder
 */
export interface GroupConfigInterface {
    key?: GroupKey;
    isPlaceholder?: boolean;
}
/**
 * @param useCollectionPattern - If Group storageKey follows the Collection Group StorageKey Pattern
 */
export interface GroupPersistConfigInterface extends StatePersistentConfigInterface {
    followCollectionPersistKeyPattern?: boolean;
}
