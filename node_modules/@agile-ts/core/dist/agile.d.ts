import { Runtime, Integration, State, Storage, Collection, CollectionConfig, DefaultItem, Computed, Integrations, Observer, SubController, Storages, CreateStorageConfigInterface, RegisterConfigInterface, Logger, CreateLoggerConfigInterface, StateConfigInterface, Group } from './internal';
export declare class Agile {
    config: AgileConfigInterface;
    runtime: Runtime;
    subController: SubController;
    storages: Storages;
    integrations: Integrations;
    static initialIntegrations: Integration[];
    static logger: Logger;
    static globalKey: string;
    /**
     * @public
     * Agile - Global state and logic framework for reactive Typescript & Javascript applications
     * @param config - Config
     */
    constructor(config?: CreateAgileConfigInterface);
    /**
     * @public
     * Storage - Handy Interface for storing Items permanently
     * @param config - Config
     */
    createStorage(config: CreateStorageConfigInterface): Storage;
    /**
     * @public
     * State - Class that holds one Value and causes rerender on subscribed Components
     * @param initialValue - Initial Value of the State
     * @param config - Config
     */
    createState<ValueType = any>(initialValue: ValueType, config?: StateConfigInterface): State<ValueType>;
    /**
     * @public
     * Collection - Class that holds a List of Objects with key and causes rerender on subscribed Components
     * @param config - Config
     */
    createCollection<DataType extends object = DefaultItem>(config?: CollectionConfig<DataType>): Collection<DataType>;
    /**
     * @public
     * Computed - Function that recomputes its value if a dependency changes
     * @param computeFunction - Function for computing value
     * @param config - Config
     * @param deps - Hard coded dependencies of Computed Function
     */
    createComputed<ComputedValueType = any>(computeFunction: () => ComputedValueType, config?: StateConfigInterface, deps?: Array<Observer | State | Event | Group>): Computed<ComputedValueType>;
    /**
     * @public
     * Computed - Function that recomputes its value if a dependency changes
     * @param computeFunction - Function for computing value
     * @param deps - Hard coded dependencies of Computed Function
     */
    createComputed<ComputedValueType = any>(computeFunction: () => ComputedValueType, deps?: Array<Observer | State | Event>): Computed<ComputedValueType>;
    /**
     * @public
     * Integrates framework into Agile
     * @param integration - Integration that gets registered/integrated
     */
    integrate(integration: Integration): this;
    /**
     * @public
     * Registers new Storage as Agile Storage
     * @param storage - new Storage
     * @param config - Config
     */
    registerStorage(storage: Storage, config?: RegisterConfigInterface): this;
    /**
     * @public
     * Checks if Agile has any registered Integration
     */
    hasIntegration(): boolean;
    /**
     * @public
     * Checks if Agile has any registered Storage
     */
    hasStorage(): boolean;
}
/**
 * @param logJobs - Allow Agile Logs
 * @param waitForMount - If Agile should wait until the component mounts
 * @param storageConfig - To configure Agile Storage
 * @param bindGlobal - Binds Agile Instance Global
 */
export interface CreateAgileConfigInterface {
    logConfig?: CreateLoggerConfigInterface;
    waitForMount?: boolean;
    localStorage?: boolean;
    bindGlobal?: boolean;
}
/**
 * @param waitForMount - If Agile should wait until the component mounts
 */
export interface AgileConfigInterface {
    waitForMount: boolean;
}
