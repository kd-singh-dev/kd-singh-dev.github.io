import { Agile, Observer, SubscriptionContainer, ComponentSubscriptionContainer, CallbackSubscriptionContainer, SubscriptionContainerConfigInterface } from '../../internal';
export declare class SubController {
    agileInstance: () => Agile;
    componentSubs: Set<ComponentSubscriptionContainer>;
    callbackSubs: Set<CallbackSubscriptionContainer>;
    mountedComponents: Set<any>;
    /**
     * @internal
     * SubController - Handles subscriptions to Components
     * @param agileInstance - An instance of Agile
     */
    constructor(agileInstance: Agile);
    /**
     * @internal
     * Subscribe with Object shaped Subscriptions
     * @param integrationInstance - Callback Function or Component
     * @param subs - Initial Subscription Object
     * @param config - Config
     */
    subscribeWithSubsObject(integrationInstance: any, subs?: {
        [key: string]: Observer;
    }, config?: SubscriptionContainerConfigInterface): {
        subscriptionContainer: SubscriptionContainer;
        props: {
            [key: string]: Observer['value'];
        };
    };
    /**
     * @internal
     * Subscribe with Array shaped Subscriptions
     * @param integrationInstance - Callback Function or Component
     * @param subs - Initial Subscription Array
     * @param config - Config
     */
    subscribeWithSubsArray(integrationInstance: any, subs?: Array<Observer>, config?: SubscriptionContainerConfigInterface): SubscriptionContainer;
    /**
     * @internal
     * Unsubscribes SubscriptionContainer(Component)
     * @param subscriptionInstance - SubscriptionContainer or Component that holds an SubscriptionContainer
     */
    unsubscribe(subscriptionInstance: any): void;
    /**
     * @internal
     * Registers SubscriptionContainer and decides weather integrationInstance is a callback or component based Subscription
     * @param integrationInstance - Callback Function or Component
     * @param subs - Initial Subscriptions
     * @param config - Config
     */
    registerSubscription(integrationInstance: any, subs?: Array<Observer>, config?: SubscriptionContainerConfigInterface): SubscriptionContainer;
    /**
     * @internal
     * Registers Component based Subscription and applies SubscriptionContainer to Component.
     * If an instance called 'subscriptionContainers' exists in Component it will push the new SubscriptionContainer to this Array,
     * otherwise it creates a new Instance called 'subscriptionContainer' which holds the new  SubscriptionContainer
     * @param componentInstance - Component that got subscribed by Observer/s
     * @param subs - Initial Subscriptions
     * @param config - Config
     */
    registerComponentSubscription(componentInstance: any, subs?: Array<Observer>, config?: SubscriptionContainerConfigInterface): ComponentSubscriptionContainer;
    /**
     * @internal
     * Registers Callback based Subscription
     * @param callbackFunction - Callback Function that causes rerender on Component which got subscribed by Observer/s
     * @param subs - Initial Subscriptions
     * @param config - Config
     */
    registerCallbackSubscription(callbackFunction: () => void, subs?: Array<Observer>, config?: SubscriptionContainerConfigInterface): CallbackSubscriptionContainer;
    /**
     * @internal
     * Mounts Component based SubscriptionContainer
     * @param componentInstance - SubscriptionContainer(Component) that gets mounted
     */
    mount(componentInstance: any): void;
    /**
     * @internal
     * Unmounts Component based SubscriptionContainer
     * @param componentInstance - SubscriptionContainer(Component) that gets unmounted
     */
    unmount(componentInstance: any): void;
}
