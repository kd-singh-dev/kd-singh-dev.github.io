import { Agile, StateKey, RuntimeJob, SubscriptionContainer, IngestConfigInterface, CreateRuntimeJobConfigInterface } from '../internal';
export declare type ObserverKey = string | number;
export declare class Observer<ValueType = any> {
    agileInstance: () => Agile;
    _key?: ObserverKey;
    dependents: Set<Observer>;
    subs: Set<SubscriptionContainer>;
    value?: ValueType;
    previousValue?: ValueType;
    /**
     * @internal
     * Observer - Handles subscriptions and dependencies of an Agile Class and is like an instance to the Runtime
     * Note: No stand alone class!!
     * @param agileInstance - An instance of Agile
     * @param config - Config
     */
    constructor(agileInstance: Agile, config?: CreateObserverConfigInterface<ValueType>);
    /**
     * @internal
     * Set Key/Name of Observer
     */
    set key(value: StateKey | undefined);
    /**
     * @internal
     * Get Key/Name of Observer
     */
    get key(): StateKey | undefined;
    /**
     * @internal
     * Ingests Observer into Runtime
     * @param config - Configuration
     */
    ingest(config?: ObserverIngestConfigInterface): void;
    /**
     * @internal
     * Performs Job of Runtime
     * @param job - Job that gets performed
     */
    perform(job: RuntimeJob): void;
    /**
     * @internal
     * Adds Dependent to Observer which gets ingested into the Runtime whenever this Observer mutates
     * @param observer - Observer that will depend on this Observer
     */
    depend(observer: Observer): void;
    /**
     * @internal
     * Adds Subscription to Observer
     * @param subscriptionContainer - SubscriptionContainer(Component) that gets subscribed by this Observer
     */
    subscribe(subscriptionContainer: SubscriptionContainer): void;
    /**
     * @internal
     * Removes Subscription from Observer
     * @param subscriptionContainer - SubscriptionContainer(Component) that gets unsubscribed by this Observer
     */
    unsubscribe(subscriptionContainer: SubscriptionContainer): void;
}
/**
 * @param deps - Initial Dependents of Observer
 * @param subs - Initial Subscriptions of Observer
 * @param key - Key/Name of Observer
 * @param value - Initial Value of Observer
 */
export interface CreateObserverConfigInterface<ValueType = any> {
    dependents?: Array<Observer>;
    subs?: Array<SubscriptionContainer>;
    key?: ObserverKey;
    value?: ValueType;
}
export interface ObserverIngestConfigInterface extends CreateRuntimeJobConfigInterface, IngestConfigInterface {
}
