import { Agile, SubscriptionContainer, RuntimeJob } from '../internal';
export declare class Runtime {
    agileInstance: () => Agile;
    currentJob: RuntimeJob | null;
    jobQueue: Array<RuntimeJob>;
    notReadyJobsToRerender: Set<RuntimeJob>;
    jobsToRerender: Array<RuntimeJob>;
    /**
     * @internal
     * Runtime - Performs ingested Observers
     * @param agileInstance - An instance of Agile
     */
    constructor(agileInstance: Agile);
    /**
     * @internal
     * Ingests Job into Runtime that gets performed
     * @param job - Job
     * @param config - Config
     */
    ingest(job: RuntimeJob, config?: IngestConfigInterface): void;
    /**
     * @internal
     * Performs Job and adds it to the rerender queue if necessary
     * @param job - Job that gets performed
     */
    perform(job: RuntimeJob): void;
    /**
     * @internal
     * Updates/Rerenders all Subscribed Components (SubscriptionContainer) of the Job (Observer)
     * @return If any subscriptionContainer got updated (-> triggered a rerender on the Component it represents)
     */
    updateSubscribers(): boolean;
    /**
     * @internal
     * Finds key of Observer (Job) in subsObject and adds it to 'changedObjectKeys'
     * @param subscriptionContainer - Object based SubscriptionContainer
     * @param job - Job that holds the searched Observer
     */
    handleObjectBasedSubscription(subscriptionContainer: SubscriptionContainer, job: RuntimeJob): void;
    /**
     * @internal
     * Builds Object out of changedObjectKeys with Observer Value
     * @param subscriptionContainer - Object based SubscriptionContainer
     */
    getObjectBasedProps(subscriptionContainer: SubscriptionContainer): {
        [key: string]: any;
    };
    /**
     * @internal
     * Checks if the subscriptionContainer should be updated.
     * Therefore it reviews the '.value' and the '.previousValue' property of the Observer the Job represents.
     * If a property at the proxy detected path differs, the subscriptionContainer is allowed to update.
     * @param subscriptionContainer - SubscriptionContainer
     * @param job - Job
     * @return {boolean} If the subscriptionContainer should be updated
     * -> If a from the Proxy Tree detected property differs from the same property in the previous value
     * or the passed subscriptionContainer isn't properly proxy based
     */
    handleProxyBasedSubscription(subscriptionContainer: SubscriptionContainer, job: RuntimeJob): boolean;
}
/**
 * @param perform - If Job gets performed immediately
 */
export interface IngestConfigInterface {
    perform?: boolean;
}
