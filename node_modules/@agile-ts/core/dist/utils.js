"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalBind = exports.extractObservers = exports.getAgileInstance = void 0;
const internal_1 = require("./internal");
function getAgileInstance(instance) {
    try {
        if (instance) {
            const _agileInstance = internal_1.isFunction(instance['agileInstance'])
                ? instance['agileInstance']()
                : instance['agileInstance'];
            if (_agileInstance)
                return _agileInstance;
        }
        return globalThis[internal_1.Agile.globalKey];
    }
    catch (e) {
        internal_1.Agile.logger.error('Failed to get Agile Instance from ', instance);
    }
    return undefined;
}
exports.getAgileInstance = getAgileInstance;
function extractObservers(instances) {
    const instancesArray = [];
    const tempInstancesArray = internal_1.normalizeArray(instances, {
        createUndefinedArray: true,
    });
    for (const instance of tempInstancesArray) {
        if (!instance) {
            instancesArray.push(undefined);
            continue;
        }
        if (instance instanceof internal_1.Collection) {
            instancesArray.push(instance.getGroupWithReference(instance.config.defaultGroupKey).observer);
            continue;
        }
        if (instance['observer'] && instance['observer'] instanceof internal_1.Observer) {
            instancesArray.push(instance['observer']);
            continue;
        }
        if (instance instanceof internal_1.Observer) {
            instancesArray.push(instance);
            continue;
        }
        instancesArray.push(undefined);
    }
    return instancesArray;
}
exports.extractObservers = extractObservers;
function globalBind(key, instance, overwrite = false) {
    try {
        if (overwrite) {
            globalThis[key] = instance;
            return true;
        }
        if (globalThis[key] == null) {
            globalThis[key] = instance;
            return true;
        }
    }
    catch (e) {
        internal_1.Agile.logger.error(`Failed to create global Instance called '${key}'`);
    }
    return false;
}
exports.globalBind = globalBind;
