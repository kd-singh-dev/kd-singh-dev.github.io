"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agile = void 0;
const internal_1 = require("./internal");
class Agile {
    constructor(config = {}) {
        config = internal_1.defineConfig(config, {
            localStorage: true,
            waitForMount: true,
            logConfig: {},
            bindGlobal: false,
        });
        config.logConfig = internal_1.defineConfig(config.logConfig, {
            prefix: 'Agile',
            active: true,
            level: internal_1.Logger.level.WARN,
            canUseCustomStyles: true,
            allowedTags: ['runtime', 'storage', 'subscription', 'multieditor'],
        });
        this.config = {
            waitForMount: config.waitForMount,
        };
        this.integrations = new internal_1.Integrations(this);
        this.runtime = new internal_1.Runtime(this);
        this.subController = new internal_1.SubController(this);
        this.storages = new internal_1.Storages(this, {
            localStorage: config.localStorage,
        });
        Agile.logger = new internal_1.Logger(config.logConfig);
        Agile.logger.success('Created new AgileInstance ', this, Agile.logger);
        if (config.bindGlobal) {
            if (!internal_1.globalBind(Agile.globalKey, this))
                Agile.logger.warn('Be careful with binding multiple Agile Instances globally in one Application!');
        }
    }
    createStorage(config) {
        return new internal_1.Storage(config);
    }
    createState(initialValue, config = {}) {
        return new internal_1.State(this, initialValue, config);
    }
    createCollection(config) {
        return new internal_1.Collection(this, config);
    }
    createComputed(computeFunction, configOrDeps, deps) {
        let _deps;
        let _config;
        if (Array.isArray(configOrDeps)) {
            _deps = configOrDeps;
            _config = {};
        }
        else {
            _config = configOrDeps || {};
            _deps = deps || [];
        }
        return new internal_1.Computed(this, computeFunction, internal_1.flatMerge(_config, {
            computedDeps: _deps,
        }));
    }
    integrate(integration) {
        this.integrations.integrate(integration);
        return this;
    }
    registerStorage(storage, config = {}) {
        this.storages.register(storage, config);
        return this;
    }
    hasIntegration() {
        return this.integrations.hasIntegration();
    }
    hasStorage() {
        return this.storages.hasStorage();
    }
}
exports.Agile = Agile;
Agile.initialIntegrations = [];
Agile.logger = new internal_1.Logger({
    prefix: 'Agile',
    active: true,
    level: internal_1.Logger.level.WARN,
});
Agile.globalKey = '__agile__';
