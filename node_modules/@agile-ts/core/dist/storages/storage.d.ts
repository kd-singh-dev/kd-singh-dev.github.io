export declare class Storage {
    key: StorageKey;
    ready: boolean;
    methods: StorageMethodsInterface;
    config: StorageConfigInterface;
    /**
     * @public
     * Storage - Interface for storing Items permanently
     * @param config - Config
     */
    constructor(config: CreateStorageConfigInterface);
    /**
     * @public
     * Validates Storage Methods
     */
    validate(): boolean;
    /**
     * @internal
     * Gets value at provided Key (normal)
     * Note: Only use this if you are 100% sure this Storage doesn't work async
     * @param key - Key of Storage property
     */
    normalGet<GetTpe = any>(key: StorageItemKey): GetTpe | undefined;
    /**
     * @internal
     * Gets value at provided Key (async)
     * @param key - Key of Storage property
     */
    get<GetTpe = any>(key: StorageItemKey): Promise<GetTpe | undefined>;
    /**
     * @public
     * Saves/Updates value at provided Key
     * @param key - Key of Storage property
     * @param value - new Value that gets set
     */
    set(key: StorageItemKey, value: any): void;
    /**
     * @public
     * Removes value at provided Key
     * @param key - Key of Storage property
     */
    remove(key: StorageItemKey): void;
    /**
     * @internal
     * Creates Storage Key from provided key
     * @param key - Key that gets converted into a Storage Key
     */
    getStorageKey(key: StorageItemKey): string;
}
export declare type StorageKey = string | number;
export declare type StorageItemKey = string | number;
/**
 * @param key - Key/Name of Storage
 * @param methods - Storage methods like (get, set, remove)
 */
export interface CreateStorageConfigInterface extends StorageConfigInterface {
    key: string;
    methods: StorageMethodsInterface;
}
/**
 * @param get - Get Method of Storage (gets items from storage)
 * @param set - Set Method of Storage (saves/updates items in storage)
 * @param remove - Remove Methods of Storage (removes items from storage)
 */
export interface StorageMethodsInterface {
    get: (key: string) => any;
    set: (key: string, value: any) => void;
    remove: (key: string) => void;
}
/**
 * @param async - If its an async storage
 * @param prefix - Prefix of Storage Property
 */
export interface StorageConfigInterface {
    async?: boolean;
    prefix?: string;
}
