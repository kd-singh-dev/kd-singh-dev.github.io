import { Agile, Storage, Persistent, StorageKey, StorageItemKey } from '../internal';
export declare class Storages {
    agileInstance: () => Agile;
    config: StoragesConfigInterface;
    storages: {
        [key: string]: Storage;
    };
    persistentInstances: Set<Persistent>;
    /**
     * @internal
     * Storages - Manages Storages of Agile
     * @param agileInstance - An Instance of Agile
     * @param config - Config
     */
    constructor(agileInstance: Agile, config?: CreateStoragesConfigInterface);
    /**
     * @internal
     * Instantiates Local Storage
     */
    instantiateLocalStorage(): boolean;
    /**
     * @internal
     * Register new Storage as Agile Storage
     * @param storage - new Storage
     * @param config - Config
     */
    register(storage: Storage, config?: RegisterConfigInterface): boolean;
    /**
     * @internal
     * Get Storage at Key/Name
     * @param storageKey - Key/Name of Storage
     */
    getStorage(storageKey: StorageKey | undefined | null): Storage | undefined;
    /**
     * @internal
     * Gets value at provided Key
     * @param key - Key of Storage property
     * @param storageKey - Key/Name of Storage from which the Item is fetched (if not provided default Storage will be used)
     */
    get<GetType = any>(key: StorageItemKey, storageKey?: StorageKey): Promise<GetType | undefined>;
    /**
     * @internal
     * Saves/Updates value at provided Key
     * @param key - Key of Storage property
     * @param value - new Value that gets set at provided Key
     * @param storageKeys - Key/Name of Storages where the Value gets set (if not provided default Storage will be used)
     */
    set(key: StorageItemKey, value: any, storageKeys?: StorageKey[]): void;
    /**
     * @internal
     * Removes value at provided Key
     * @param key - Key of Storage property
     * @param storageKeys - Key/Name of Storages where the Value gets removed (if not provided default Storage will be used)
     */
    remove(key: StorageItemKey, storageKeys?: StorageKey[]): void;
    /**
     * @internal
     * Check if at least one Storage got registered
     */
    hasStorage(): boolean;
    /**
     * @internal
     * Checks if localStorage is available in this Environment
     */
    static localStorageAvailable(): boolean;
}
/**
 * @param localStorage - If Local Storage should be instantiated
 * @param defaultStorage - Default Storage Key
 */
export interface CreateStoragesConfigInterface {
    localStorage?: boolean;
    defaultStorageKey?: StorageKey;
}
/**
 * @param defaultStorage - Default Storage Key
 */
export interface StoragesConfigInterface {
    defaultStorageKey: StorageKey | null;
}
/**
 * @param default - If the registered Storage gets the default Storage
 */
export interface RegisterConfigInterface {
    default?: boolean;
}
