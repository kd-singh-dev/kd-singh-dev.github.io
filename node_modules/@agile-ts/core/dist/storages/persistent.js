"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Persistent = void 0;
const internal_1 = require("../internal");
class Persistent {
    constructor(agileInstance, config = {}) {
        this.ready = false;
        this.isPersisted = false;
        this.storageKeys = [];
        this.agileInstance = () => agileInstance;
        this._key = Persistent.placeHolderKey;
        config = internal_1.defineConfig(config, {
            instantiate: true,
            storageKeys: [],
            defaultStorageKey: null,
        });
        this.agileInstance().storages.persistentInstances.add(this);
        this.config = { defaultStorageKey: config.defaultStorageKey };
        if (config.instantiate) {
            this.instantiatePersistent({
                storageKeys: config.storageKeys,
                key: config.key,
                defaultStorageKey: config.defaultStorageKey,
            });
        }
    }
    set key(value) {
        this.setKey(value);
    }
    get key() {
        return this._key;
    }
    setKey(value) {
        this._key = value;
    }
    instantiatePersistent(config = {}) {
        this._key = this.formatKey(config.key) || Persistent.placeHolderKey;
        this.assignStorageKeys(config.storageKeys, config.defaultStorageKey);
        this.validatePersistent();
    }
    validatePersistent() {
        let isValid = true;
        if (this._key === Persistent.placeHolderKey) {
            internal_1.Agile.logger.error('No valid persist Key found! Please provide a Key or assign one to the parent instance.');
            isValid = false;
        }
        if (!this.config.defaultStorageKey || this.storageKeys.length <= 0) {
            internal_1.Agile.logger.error('No persist Storage Key found! Please provide at least one Storage Key.');
            isValid = false;
        }
        this.storageKeys.map((key) => {
            if (!this.agileInstance().storages.storages[key]) {
                internal_1.Agile.logger.error(`Storage '${key}' doesn't exist yet. Please provide only existing StorageKeys!`);
                isValid = false;
            }
        });
        this.ready = isValid;
        return isValid;
    }
    assignStorageKeys(storageKeys = [], defaultStorageKey) {
        const storages = this.agileInstance().storages;
        const _storageKeys = internal_1.copy(storageKeys);
        if (defaultStorageKey && !_storageKeys.includes(defaultStorageKey)) {
            internal_1.Agile.logger.warn(`Default Storage Key '${defaultStorageKey}' isn't contained in storageKeys!`, _storageKeys);
            _storageKeys.push(defaultStorageKey);
        }
        if (_storageKeys.length <= 0) {
            this.config.defaultStorageKey = storages.config.defaultStorageKey;
            _storageKeys.push(storages.config.defaultStorageKey);
        }
        else {
            this.config.defaultStorageKey = defaultStorageKey || _storageKeys[0];
        }
        this.storageKeys = _storageKeys;
    }
    initialLoading() {
        return __awaiter(this, void 0, void 0, function* () {
            const success = yield this.loadPersistedValue();
            if (this.onLoad)
                this.onLoad(success);
            if (!success)
                yield this.persistValue();
        });
    }
    loadPersistedValue() {
        return __awaiter(this, void 0, void 0, function* () {
            internal_1.Agile.logger.error(`'loadPersistedValue' function isn't Set in Persistent! Be aware that Persistent is no stand alone class!`);
            return false;
        });
    }
    persistValue() {
        return __awaiter(this, void 0, void 0, function* () {
            internal_1.Agile.logger.error(`'persistValue' function isn't Set in Persistent! Be aware that Persistent is no stand alone class!`);
            return false;
        });
    }
    removePersistedValue() {
        return __awaiter(this, void 0, void 0, function* () {
            internal_1.Agile.logger.error(`'removePersistedValue' function isn't Set in Persistent! Be aware that Persistent is no stand alone class!`);
            return false;
        });
    }
    formatKey(key) {
        return key;
    }
}
exports.Persistent = Persistent;
Persistent.placeHolderKey = '__THIS_IS_A_PLACEHOLDER__';
