import { Agile, StorageKey } from '../internal';
export declare class Persistent {
    agileInstance: () => Agile;
    static placeHolderKey: string;
    config: PersistentConfigInterface;
    _key: PersistentKey;
    ready: boolean;
    isPersisted: boolean;
    onLoad: ((success: boolean) => void) | undefined;
    storageKeys: StorageKey[];
    /**
     * @internal
     * Persistent - Handles storing of Agile Instances
     * Note: No stand alone class!!
     * @param agileInstance - An instance of Agile
     * @param config - Config
     */
    constructor(agileInstance: Agile, config?: CreatePersistentConfigInterface);
    /**
     * @internal
     * Set Key/Name of Persistent
     */
    set key(value: StorageKey);
    /**
     * @internal
     * Get Key/Name of Persistent
     */
    get key(): StorageKey;
    /**
     * @public
     * Sets Key/Name of Persistent
     * @param value - New Key/Name of Persistent
     */
    setKey(value: StorageKey): void;
    /**
     * @internal
     * Instantiates this Class
     * Note: Had to outsource it from the constructor because some extending classes
     * have to define some stuff before being able to instantiate the parent (this)
     * @param config - Config
     */
    instantiatePersistent(config?: InstantiatePersistentConfigInterface): void;
    /**
     * @internal
     * Validates Persistent and updates its 'ready' property
     */
    validatePersistent(): boolean;
    /**
     * @internal
     * Assign new StorageKeys to Persistent and overwrite the old ones
     * @param storageKeys - New Storage Keys
     * @param defaultStorageKey - Key of default Storage
     */
    assignStorageKeys(storageKeys?: StorageKey[], defaultStorageKey?: StorageKey): void;
    /**
     * @internal
     * Loads/Saves Storage Value for the first Time
     */
    initialLoading(): Promise<void>;
    /**
     * @internal
     * Loads Value from Storage
     * @return Success?
     */
    loadPersistedValue(): Promise<boolean>;
    /**
     * @internal
     * Saves/Updates Value in Storage
     * @return Success?
     */
    persistValue(): Promise<boolean>;
    /**
     * @internal
     * Removes Value form Storage
     * @return Success?
     */
    removePersistedValue(): Promise<boolean>;
    /**
     * @internal
     * Validates Storage Key
     * @param key - Key that gets validated
     */
    formatKey(key?: PersistentKey): PersistentKey | undefined;
}
export declare type PersistentKey = string | number;
/**
 * @param key - Key/Name of Persistent
 * @param storageKeys - Keys of Storages in that the persisted Value gets saved
 * @param defaultStorage - Default Storage Key
 * @param instantiate - If Persistent gets Instantiated immediately
 */
export interface CreatePersistentConfigInterface {
    key?: PersistentKey;
    storageKeys?: StorageKey[];
    defaultStorageKey?: StorageKey;
    instantiate?: boolean;
}
/**
 * @param defaultStorageKey - Default Storage Key
 */
export interface PersistentConfigInterface {
    defaultStorageKey: StorageKey | null;
}
/**
 * @param key - Key/Name of Persistent
 * @param storageKeys - Keys of Storages in that the persisted Value gets saved
 * @param defaultStorageKey - Default Storage Key (if not provided it takes the first index of storageKeys or the AgileTs default Storage)
 */
export interface InstantiatePersistentConfigInterface {
    key?: PersistentKey;
    storageKeys?: StorageKey[];
    defaultStorageKey?: StorageKey;
}
