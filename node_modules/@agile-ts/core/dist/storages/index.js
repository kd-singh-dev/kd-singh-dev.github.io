"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storages = void 0;
const internal_1 = require("../internal");
class Storages {
    constructor(agileInstance, config = {}) {
        this.storages = {};
        this.persistentInstances = new Set();
        this.agileInstance = () => agileInstance;
        config = internal_1.defineConfig(config, {
            localStorage: false,
            defaultStorageKey: null,
        });
        this.config = { defaultStorageKey: config.defaultStorageKey };
        if (config.localStorage)
            this.instantiateLocalStorage();
    }
    instantiateLocalStorage() {
        if (!Storages.localStorageAvailable()) {
            internal_1.Agile.logger.warn('Local Storage is here not available, to use Storage functionalities like persist please provide a custom Storage!');
            return false;
        }
        const _localStorage = new internal_1.Storage({
            key: 'localStorage',
            async: false,
            methods: {
                get: localStorage.getItem.bind(localStorage),
                set: localStorage.setItem.bind(localStorage),
                remove: localStorage.removeItem.bind(localStorage),
            },
        });
        return this.register(_localStorage, { default: true });
    }
    register(storage, config = {}) {
        const hasRegisteredAnyStorage = internal_1.notEqual(this.storages, {});
        if (Object.prototype.hasOwnProperty.call(this.storages, storage.key)) {
            internal_1.Agile.logger.error(`Storage with the key/name '${storage.key}' already exists`);
            return false;
        }
        if (!hasRegisteredAnyStorage && config.default === false) {
            internal_1.Agile.logger.warn('Be aware that Agile has to assign the first added Storage as default Storage!');
        }
        if (!hasRegisteredAnyStorage)
            config.default = true;
        this.storages[storage.key] = storage;
        if (config.default)
            this.config.defaultStorageKey = storage.key;
        this.persistentInstances.forEach((persistent) => {
            if (persistent.storageKeys.includes(storage.key)) {
                const isValid = persistent.validatePersistent();
                if (isValid)
                    persistent.initialLoading();
                return;
            }
            if (!persistent.config.defaultStorageKey) {
                persistent.assignStorageKeys();
                const isValid = persistent.validatePersistent();
                if (isValid)
                    persistent.initialLoading();
            }
        });
        return true;
    }
    getStorage(storageKey) {
        if (!storageKey)
            return undefined;
        const storage = this.storages[storageKey];
        if (!storage) {
            internal_1.Agile.logger.error(`Storage with the key/name '${storageKey}' doesn't exist!`);
            return undefined;
        }
        if (!storage.ready) {
            internal_1.Agile.logger.error(`Storage with the key/name '${storageKey}' isn't ready yet!`);
            return undefined;
        }
        return storage;
    }
    get(key, storageKey) {
        if (!this.hasStorage()) {
            internal_1.Agile.logger.error('No Storage found! Please provide at least one Storage.');
            return Promise.resolve(undefined);
        }
        if (storageKey) {
            const storage = this.getStorage(storageKey);
            if (storage)
                return storage.get(key);
        }
        const defaultStorage = this.getStorage(this.config.defaultStorageKey);
        return (defaultStorage === null || defaultStorage === void 0 ? void 0 : defaultStorage.get(key)) || Promise.resolve(undefined);
    }
    set(key, value, storageKeys) {
        var _a;
        if (!this.hasStorage()) {
            internal_1.Agile.logger.error('No Storage found! Please provide at least one Storage.');
            return;
        }
        if (storageKeys) {
            for (const storageKey of storageKeys)
                (_a = this.getStorage(storageKey)) === null || _a === void 0 ? void 0 : _a.set(key, value);
            return;
        }
        const defaultStorage = this.getStorage(this.config.defaultStorageKey);
        defaultStorage === null || defaultStorage === void 0 ? void 0 : defaultStorage.set(key, value);
    }
    remove(key, storageKeys) {
        var _a;
        if (!this.hasStorage()) {
            internal_1.Agile.logger.error('No Storage found! Please provide at least one Storage.');
            return;
        }
        if (storageKeys) {
            for (const storageKey of storageKeys)
                (_a = this.getStorage(storageKey)) === null || _a === void 0 ? void 0 : _a.remove(key);
            return;
        }
        const defaultStorage = this.getStorage(this.config.defaultStorageKey);
        defaultStorage === null || defaultStorage === void 0 ? void 0 : defaultStorage.remove(key);
    }
    hasStorage() {
        return internal_1.notEqual(this.storages, {});
    }
    static localStorageAvailable() {
        try {
            localStorage.setItem('_myDummyKey_', 'myDummyValue');
            localStorage.removeItem('_myDummyKey_');
            return true;
        }
        catch (e) {
            return false;
        }
    }
}
exports.Storages = Storages;
