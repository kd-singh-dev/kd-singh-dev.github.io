"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storage = void 0;
const internal_1 = require("../internal");
class Storage {
    constructor(config) {
        this.ready = false;
        config = internal_1.defineConfig(config, {
            prefix: 'agile',
            async: false,
        });
        this.key = config.key;
        this.methods = config.methods;
        this.config = {
            prefix: config.prefix,
            async: config.async,
        };
        this.ready = this.validate();
        if (!this.ready)
            return;
        if (internal_1.isAsyncFunction(this.methods.get) ||
            internal_1.isAsyncFunction(this.methods.set) ||
            internal_1.isAsyncFunction(this.methods.remove))
            this.config.async = true;
    }
    validate() {
        var _a, _b, _c;
        if (!internal_1.isFunction((_a = this.methods) === null || _a === void 0 ? void 0 : _a.get)) {
            internal_1.Agile.logger.error("Your GET StorageMethod isn't valid!");
            return false;
        }
        if (!internal_1.isFunction((_b = this.methods) === null || _b === void 0 ? void 0 : _b.set)) {
            internal_1.Agile.logger.error("Your SET StorageMethod isn't valid!");
            return false;
        }
        if (!internal_1.isFunction((_c = this.methods) === null || _c === void 0 ? void 0 : _c.remove)) {
            internal_1.Agile.logger.error("Your REMOVE StorageMethod isn't valid!");
            return false;
        }
        return true;
    }
    normalGet(key) {
        if (!this.ready || !this.methods.get)
            return;
        if (internal_1.isAsyncFunction(this.methods.get))
            internal_1.Agile.logger.warn("Be aware that 'normalGet' returns a Promise with a stringified Value if using it in an async Storage!");
        const res = this.methods.get(this.getStorageKey(key));
        if (internal_1.isJsonString(res))
            return JSON.parse(res);
        return res;
    }
    get(key) {
        if (!this.ready || !this.methods.get)
            return Promise.resolve(undefined);
        if (!internal_1.isAsyncFunction(this.methods.get))
            return Promise.resolve(this.normalGet(key));
        return new Promise((resolve, reject) => {
            var _a;
            (_a = this.methods) === null || _a === void 0 ? void 0 : _a.get(this.getStorageKey(key)).then((res) => {
                if (internal_1.isJsonString(res))
                    resolve(JSON.parse(res));
                resolve(res);
            }).catch(reject);
        });
    }
    set(key, value) {
        if (!this.ready || !this.methods.set)
            return;
        this.methods.set(this.getStorageKey(key), JSON.stringify(value));
    }
    remove(key) {
        if (!this.ready || !this.methods.remove)
            return;
        this.methods.remove(this.getStorageKey(key));
    }
    getStorageKey(key) {
        return this.config.prefix
            ? `_${this.config.prefix}_${key}`
            : key.toString();
    }
}
exports.Storage = Storage;
