/**
 * @internal
 * Creates a fresh copy of an Array/Object
 * https://www.samanthaming.com/tidbits/70-3-ways-to-clone-objects/
 * @param value - Array/Object that gets copied
 */
export declare function copy<T = any>(value: T): T;
/**
 * @internal
 * Checks if passed value is a valid Object
 * https://stackoverflow.com/questions/12996871/why-does-typeof-array-with-objects-return-object-and-not-array
 * @param value - Value that is tested for its correctness
 * @param considerArray - Whether Arrays should be considered as object
 */
export declare function isValidObject(value: any, considerArray?: boolean): boolean;
/**
 * @internal
 * Check if array1 contains all elements of array2
 * @param array1 - Array 1
 * @param array2 - Array 2
 */
export declare function includesArray<DataType = any>(array1: Array<DataType>, array2: Array<DataType>): boolean;
/**
 * @internal
 * Transforms Item/s to an Item Array
 * @param items - Item/s that gets transformed to an Array
 * @param config - Config
 */
export declare function normalizeArray<DataType = any>(items?: DataType | Array<DataType>, config?: {
    createUndefinedArray?: boolean;
}): Array<DataType>;
/**
 * @internal
 * Checks if value is a function
 * @param value - Value that gets tested if its a function
 */
export declare function isFunction(value: any): boolean;
/**
 * @internal
 * Checks if value is an async function
 * @param value - Value that gets tested if its an async function
 */
export declare function isAsyncFunction(value: any): boolean;
/**
 * @internal
 * Checks if value is valid JsonString
 * @param value - Value that gets checked
 */
export declare function isJsonString(value: any): boolean;
/**
 * @internal
 * Merges default values/properties into config object
 * @param config - Config object that receives default values
 * @param defaults - Default values object that gets merged into config object
 * @param overwriteUndefinedProperties - If undefined Properties in config gets overwritten by the default value
 */
export declare function defineConfig<ConfigInterface = Object>(config: ConfigInterface, defaults: Object, overwriteUndefinedProperties?: boolean): ConfigInterface;
/**
 * @internal
 * @param addNewProperties - Adds new properties to source Object
 */
export interface FlatMergeConfigInterface {
    addNewProperties?: boolean;
}
/**
 * @internal
 * Merges items into object, be aware that the merge will only happen at the top level of the object.
 * Initially it adds new properties of the changes object into the source object.
 * @param source - Source object
 * @param changes - Changes that get merged into the source object
 * @param config - Config
 */
export declare function flatMerge<DataType = Object>(source: DataType, changes: Object, config?: FlatMergeConfigInterface): DataType;
/**
 * @internal
 * Check if two values are equal
 * @param value1 - First Value
 * @param value2 - Second Value
 */
export declare function equal(value1: any, value2: any): boolean;
/**
 * @internal
 * Checks if two values aren't equal
 * @param value1 - First Value
 * @param value2 - Second Value
 */
export declare function notEqual(value1: any, value2: any): boolean;
/**
 * @internal
 * Generates random Id
 * @param length - Length of generated Id
 */
export declare function generateId(length?: number): string;
/**
 * @internal
 * Transforms Object to Array
 * @param object - Object that gets transformed
 */
export declare function createArrayFromObject<P = any>(object: {
    [key: string]: P;
}): Array<{
    key: string;
    instance: P;
}>;
/**
 * @internal
 * Clones a Class
 * @param instance - Instance of Class you want to clone
 */
export declare function clone<T = any>(instance: T): T;
/**
 * @internal
 * Removes properties from Object
 * @param object - Object from which the properties get removed
 * @param properties - Properties that get removed from the object
 */
export declare function removeProperties<T = Object>(object: T, properties: Array<string>): T;
