"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgileReactComponent = exports.AgileHOC = void 0;
const react_1 = __importDefault(require("react"));
const core_1 = require("@agile-ts/core");
function AgileHOC(reactComponent, deps, agileInstance) {
    let depsWithoutIndicator = new Set();
    let depsWithIndicator;
    if (core_1.isValidObject(deps)) {
        depsWithIndicator = formatDepsWithIndicator(deps);
    }
    else {
        const response = formatDepsWithNoSafeIndicator(deps);
        depsWithIndicator = response.depsWithIndicator;
        depsWithoutIndicator = response.depsWithoutIndicator;
    }
    if (!agileInstance) {
        if (depsWithoutIndicator.size > 0) {
            for (const dep of depsWithoutIndicator) {
                if (!agileInstance)
                    agileInstance = core_1.getAgileInstance(dep);
            }
        }
        if (!agileInstance) {
            for (const depKey in depsWithIndicator) {
                if (!agileInstance)
                    agileInstance = core_1.getAgileInstance(depsWithIndicator[depKey]);
            }
        }
    }
    if (!agileInstance || !agileInstance.subController) {
        core_1.Agile.logger.error('Failed to subscribe Component with deps', deps);
        return reactComponent;
    }
    return createHOC(reactComponent, agileInstance, depsWithoutIndicator, depsWithIndicator);
}
exports.AgileHOC = AgileHOC;
const createHOC = (ReactComponent, agileInstance, depsWithoutIndicator, depsWithIndicator) => {
    return class extends ReactComponent {
        constructor(props) {
            super(props);
            this.componentSubscriptionContainers = [];
            this.agileProps = {};
            this.agileInstance = (() => agileInstance);
        }
        UNSAFE_componentWillMount() {
            if (depsWithoutIndicator) {
                this.agileInstance().subController.subscribeWithSubsArray(this, Array.from(depsWithoutIndicator));
            }
            if (depsWithIndicator) {
                const response = this.agileInstance().subController.subscribeWithSubsObject(this, depsWithIndicator);
                this.agileProps = response.props;
                this.setState(core_1.flatMerge(this.state || {}, depsWithIndicator));
            }
        }
        componentDidMount() {
            if (this.agileInstance().config.waitForMount)
                this.agileInstance().subController.mount(this);
        }
        componentWillUnmount() {
            this.agileInstance().subController.unsubscribe(this);
        }
        render() {
            return react_1.default.createElement(ReactComponent, core_1.flatMerge(this.props, this.agileProps));
        }
    };
};
const formatDepsWithNoSafeIndicator = (deps) => {
    const depsWithIndicator = {};
    const depsWithoutIndicator = new Set();
    const depsArray = core_1.normalizeArray(deps, {
        createUndefinedArray: true,
    });
    for (const dep of depsArray) {
        if (!dep)
            continue;
        if (dep instanceof core_1.Collection) {
            depsWithoutIndicator.add(dep.getGroupWithReference(dep.config.defaultGroupKey).observer);
            continue;
        }
        if (dep['observer']) {
            depsWithoutIndicator.add(dep['observer']);
            continue;
        }
        if (dep instanceof core_1.Observer) {
            depsWithoutIndicator.add(dep);
        }
    }
    for (const dep of depsWithoutIndicator) {
        if (dep && dep['key']) {
            depsWithIndicator[dep['key']] = dep;
            depsWithoutIndicator.delete(dep);
        }
    }
    return {
        depsWithIndicator,
        depsWithoutIndicator,
    };
};
const formatDepsWithIndicator = (deps) => {
    const depsWithIndicator = {};
    for (const depKey in deps) {
        const dep = deps[depKey];
        if (!dep)
            continue;
        if (dep instanceof core_1.Collection) {
            depsWithIndicator[depKey] = dep.getGroupWithReference(dep.config.defaultGroupKey).observer;
            continue;
        }
        if (dep['observer']) {
            depsWithIndicator[depKey] = dep['observer'];
            continue;
        }
        if (dep instanceof core_1.Observer) {
            depsWithIndicator[depKey] = dep;
        }
    }
    return depsWithIndicator;
};
class AgileReactComponent extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.componentSubscriptionContainers = [];
        this.agileProps = {};
    }
}
exports.AgileReactComponent = AgileReactComponent;
