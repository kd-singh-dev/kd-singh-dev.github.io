import { Agile, Collection, Group, Observer, State, SubscriptionContainerKeyType } from '@agile-ts/core';
/**
 * React Hook that binds Agile Instances like Collections, States, Computeds, .. to a React Functional Component
 * @param deps - Agile Instances that will be subscribed to this Component
 * @param config - Config
 */
export declare function useAgile<X extends Array<SubscribableAgileInstancesType>>(deps: X | [], config?: AgileHookConfigInterface): AgileHookArrayType<X>;
/**
 * React Hook that binds Agile Instance like Collection, State, Computed, .. to a React Functional Component
 * @param dep - Agile Instance that will be subscribed to this Component
 * @param config - Config
 */
export declare function useAgile<X extends SubscribableAgileInstancesType>(dep: X, config?: AgileHookConfigInterface): AgileHookType<X>;
export declare type AgileHookArrayType<T> = {
    [K in keyof T]: T[K] extends Collection<infer U> | Group<infer U> ? U[] : T[K] extends State<infer U> | Observer<infer U> ? U : T[K] extends undefined ? undefined : T[K] extends Collection<infer U> | Group<infer U> | undefined ? U[] | undefined : T[K] extends State<infer U> | Observer<infer U> | undefined ? U | undefined : never;
};
export declare type AgileHookType<T> = T extends Collection<infer U> | Group<infer U> ? U[] : T extends State<infer U> | Observer<infer U> ? U : T extends undefined ? undefined : T extends Collection<infer U> | Group<infer U> | undefined ? U[] | undefined : T extends State<infer U> | Observer<infer U> | undefined ? U | undefined : never;
export declare type SubscribableAgileInstancesType = State | Collection<any> | Observer | undefined;
/**
 * @param key - Key/Name of SubscriptionContainer that is created
 * @param agileInstance - Instance of Agile
 * @param proxyBased - If useAgile() should only rerender the Component when a used property mutates
 */
interface AgileHookConfigInterface {
    key?: SubscriptionContainerKeyType;
    agileInstance?: Agile;
    proxyBased?: boolean;
}
export {};
