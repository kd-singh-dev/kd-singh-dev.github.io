"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAgile = void 0;
const react_1 = __importDefault(require("react"));
const core_1 = require("@agile-ts/core");
const useIsomorphicLayoutEffect_1 = require("./useIsomorphicLayoutEffect");
const proxytree_1 = require("@agile-ts/proxytree");
function useAgile(deps, config = {}) {
    const depsArray = core_1.extractObservers(deps);
    const proxyTreeMap = {};
    config = core_1.defineConfig(config, {
        proxyBased: false,
        key: core_1.generateId(),
        agileInstance: null,
    });
    const getReturnValue = (depsArray) => {
        const handleReturn = (dep) => {
            const value = dep === null || dep === void 0 ? void 0 : dep.value;
            const depKey = dep === null || dep === void 0 ? void 0 : dep.key;
            if (config.proxyBased && core_1.isValidObject(value, true) && depKey) {
                const proxyTree = new proxytree_1.ProxyTree(value);
                proxyTreeMap[depKey] = proxyTree;
                return proxyTree.proxy;
            }
            return dep === null || dep === void 0 ? void 0 : dep.value;
        };
        if (depsArray.length === 1 && !Array.isArray(deps)) {
            return handleReturn(depsArray[0]);
        }
        return depsArray.map((dep) => {
            return handleReturn(dep);
        });
    };
    const [, forceRender] = react_1.default.useReducer((s) => s + 1, 0);
    useIsomorphicLayoutEffect_1.useIsomorphicLayoutEffect(() => {
        let agileInstance = config.agileInstance;
        if (!agileInstance)
            agileInstance = core_1.getAgileInstance(depsArray[0]);
        if (!agileInstance || !agileInstance.subController) {
            core_1.Agile.logger.error('Failed to subscribe Component with deps because of missing valid Agile Instance.', deps);
            return;
        }
        const observers = depsArray.filter((dep) => dep !== undefined);
        const proxyKeyMap = {};
        if (config.proxyBased) {
            for (const proxyTreeKey in proxyTreeMap) {
                const proxyTree = proxyTreeMap[proxyTreeKey];
                proxyKeyMap[proxyTreeKey] = {
                    paths: proxyTree.getUsedRoutes(),
                };
            }
        }
        const subscriptionContainer = agileInstance.subController.subscribeWithSubsArray(() => {
            forceRender();
        }, observers, { key: config.key, proxyKeyMap });
        return () => {
            agileInstance === null || agileInstance === void 0 ? void 0 : agileInstance.subController.unsubscribe(subscriptionContainer);
        };
    }, []);
    return getReturnValue(depsArray);
}
exports.useAgile = useAgile;
