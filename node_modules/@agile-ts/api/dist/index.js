"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@agile-ts/utils");
class API {
    constructor(config = {}) {
        this.config = config;
    }
    with(config = {}) {
        const modifiedApi = utils_1.clone(this);
        modifiedApi.config = Object.assign(Object.assign({}, this.config), config);
        return modifiedApi;
    }
    get(path, config = {}) {
        return this.send('GET', path, config);
    }
    post(path, payload, config = {}) {
        return this.send('POST', path, payload, config);
    }
    put(path, payload, config = {}) {
        return this.send('PUT', path, payload, config);
    }
    patch(path, payload, config = {}) {
        return this.send('PATCH', path, payload, config);
    }
    delete(path, payload, config = {}) {
        return this.send('DELETE', path, payload, config);
    }
    send(method, endpoint, payload, options = {}) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            let fullUrl;
            let response;
            let timedout = false;
            const config = utils_1.copy(this.config);
            config.options = utils_1.defineConfig(options, config.options || {});
            config.options.method = method;
            if (!config.options.headers)
                config.options.headers = {};
            if (utils_1.isValidObject(payload)) {
                config.options.body = JSON.stringify(payload);
                config.options.headers['content-type'] = 'application/json';
            }
            else {
                config.options.body = payload;
            }
            if (endpoint.startsWith('http'))
                fullUrl = endpoint;
            else
                fullUrl = `${(_a = this.config.baseURL) !== null && _a !== void 0 ? _a : ''}${this.config.path ? '/' + this.config.path : ''}/${endpoint}`;
            if (this.config.timeout) {
                let timeout;
                const timeoutPromise = new Promise((resolve) => {
                    timeout = setTimeout(() => {
                        timedout = true;
                        resolve(undefined);
                    }, this.config.timeout);
                });
                const request = new Promise((resolve, reject) => {
                    fetch(fullUrl, this.config.options)
                        .then((data) => {
                        clearTimeout(timeout);
                        resolve(data);
                    })
                        .catch(reject);
                });
                response = (yield Promise.race([timeoutPromise, request]));
            }
            if (!this.config.timeout)
                response = yield fetch(fullUrl, this.config.options);
            const agileResponse = {
                status: timedout ? 408 : (response === null || response === void 0 ? void 0 : response.status) || 404,
                raw: response,
                data: {},
                type: (_b = response === null || response === void 0 ? void 0 : response.headers) === null || _b === void 0 ? void 0 : _b.get('content-type'),
                timedout: timedout,
            };
            if ((_c = agileResponse.type) === null || _c === void 0 ? void 0 : _c.includes('application/json'))
                agileResponse.data = yield ((_d = agileResponse.raw) === null || _d === void 0 ? void 0 : _d.json());
            return agileResponse;
        });
    }
}
exports.default = API;
