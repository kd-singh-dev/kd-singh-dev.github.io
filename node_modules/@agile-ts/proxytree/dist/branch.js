"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Branch = void 0;
const utils_1 = require("./utils");
class Branch {
    constructor(proxyTree, target) {
        this.childBranches = new Set([]);
        this.proxyTree = proxyTree;
        this.target = target;
        const handler = {
            get: (target, key) => {
                if (Array.isArray(target) && key === 'length')
                    return target.length;
                if (!(key in target))
                    return undefined;
                if (!Object.prototype.hasOwnProperty.call(target, key))
                    return target[key];
                return this.recordUsage(target, key);
            },
        };
        this.proxy = new Proxy(target, handler);
    }
    recordUsage(target, key) {
        var _a, _b;
        if (key in target) {
            const value = target[key];
            const branchRoute = this.getBranchRouteAtKey(key);
            if (branchRoute) {
                branchRoute.timesAccessed += 1;
                return ((_a = branchRoute.branch) === null || _a === void 0 ? void 0 : _a.proxy) || target[key];
            }
            const newRoute = {
                key,
                timesAccessed: 1,
                branch: (utils_1.isObject(value) &&
                    this.proxyTree.createBranch(value)) ||
                    null,
            };
            this.childBranches.add(newRoute);
            return ((_b = newRoute.branch) === null || _b === void 0 ? void 0 : _b.proxy) || target[key];
        }
        return undefined;
    }
    getBranchRouteAtKey(key) {
        for (const branchRoute of this.childBranches) {
            if (branchRoute.key === key) {
                return branchRoute;
            }
        }
        return null;
    }
}
exports.Branch = Branch;
