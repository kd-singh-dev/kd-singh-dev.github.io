import { Branch, BranchKey, DefaultProxyTreeObject } from './branch';
export declare class ProxyTree<T extends object = DefaultProxyTreeObject> {
    rootBranch: Branch<T>;
    proxy: T;
    /**
     * @public
     * ProxyTree - Class that wraps around a target object, and its nested objects as you access them
     * in order to keep track of which properties were accessed via get/has proxy handlers.
     * @param target - Target Object
     */
    constructor(target: T);
    /**
     * @public
     * Creates a new Branch of the ProxyTree which represents the passed target object.
     * @param target - Target Object
     */
    createBranch<X extends object = DefaultProxyTreeObject>(target: X): Branch<X> | null;
    /**
     * @public
     * Transforms Proxy Tree into an easily processable object.
     */
    transformTreeToBranchObject(): BranchObject;
    /**
     * @public
     * Returns the Paths to the accessed properties in array shape.
     * For example, an object `{ a: [{ b: 'c' }, { 1000: 'value' }, 'b'] }`,
     * has got the following paths pointing to existing properties:
     *
     * - `[]`
     * - `['a']`
     * - `['a', 0]`
     * - `['a', 0, 'b']`
     * - `['a', 1]`
     * - `['a', 1, 1000]`
     * - `['a', 2]`
     *
     * Be aware that this path points are only tracked if the accordingly property was actually accessed.
     * The Proxy Tree isn't aware of not accessed properties and thereby doesn't know the path to them
     * as they aren't relevant yet.
     */
    getUsedRoutes(): Path[];
}
/**
 * @param key - Property key leading to this Sub Branch in the parent Branch (object)
 * @param timesAccessed - How often the Branch was accessed
 * @param branch - Sub Branches of this Branch
 */
export interface BranchObject {
    key: BranchKey;
    timesAccessed: number;
    branches: BranchObject[];
}
export declare type Path = BranchKey[];
