import { ProxyTree } from './index';
export declare class Branch<T extends object = DefaultProxyTreeObject> {
    proxy: T;
    target: T;
    proxyTree: ProxyTree;
    childBranches: Set<BranchRoute>;
    /**
     * @public
     * Branch - Represents a target object wrapped in a Proxy().
     * In doing so, it keeps track of all its properties
     * and transforms them into a sub Branch as soon as they are accessed.
     * The Branch isn't aware of not accessed properties, as they aren't yet relevant.
     * @param proxyTree - Proxy Tree the Branch belongs to
     * @param target - Target Object the Branch represents and wraps a Proxy() around
     */
    constructor(proxyTree: ProxyTree, target: T);
    /**
     * @private
     * Record usage of an accessed property in the passed target object.
     * @param target - Target object in which a property at key was accessed
     * @param key - Key that was accessed in the target object
     */
    private recordUsage;
    /**
     * @public
     * Checks if a Route to a particular property already exists in the sub Branches of this Branch.
     * @param key - Property key of the Route
     */
    getBranchRouteAtKey(key: BranchKey): BranchRoute | null;
}
/**
 * @param key - Property key leading to this Sub Branch in the parent Branch (object)
 * @param timesAccessed - How often the Route was used/accessed
 * @param branch - Branch to which the Route leads.
 * If Branch is null it means that the Tree ends here since the Route represents a primitive value (like a number).
 */
export interface BranchRoute<T extends object = DefaultProxyTreeObject> {
    key: BranchKey;
    timesAccessed: number;
    branch: Branch<T> | null;
}
export declare type BranchKey = string | number | symbol;
export declare type DefaultProxyTreeObject = Record<string, any>;
