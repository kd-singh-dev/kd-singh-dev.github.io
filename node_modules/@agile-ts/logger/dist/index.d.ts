export declare class Logger {
    key?: LoggerKey;
    isActive: boolean;
    config: LoggerConfigInterface;
    allowedTags: string[];
    loggerCategories: {
        [key: string]: LoggerCategoryInterface;
    };
    watchers: {
        [key: string]: LoggerWatcherConfigInterface;
    };
    /**
     * @public
     * Logger - Handy Class for handling console.logs
     */
    constructor(config?: LoggerConfig);
    /**
     * @public
     * Adds Conditions to Logs
     */
    get if(): {
        tag: (tags: string[]) => {
            log: (...data: any[]) => void;
            debug: (...data: any[]) => void;
            info: (...data: any[]) => void;
            success: (...data: any[]) => void;
            warn: (...data: any[]) => void;
            error: (...data: any[]) => void;
            trace: (...data: any[]) => void;
            table: (...data: any[]) => void;
        };
    };
    /**
     * @public
     * Default Levels of Logger
     */
    static get level(): {
        TRACE: number;
        DEBUG: number;
        LOG: number;
        TABLE: number;
        INFO: number;
        SUCCESS: number;
        WARN: number;
        ERROR: number;
    };
    /**
     * @internal
     * Adds Default Logger Categories
     */
    private addDefaultLoggerCategories;
    /**
     * @private
     * Only executes following 'command' if all given tags are included in allowedTags
     * @param tags - Tags
     */
    private tag;
    log(...data: any[]): void;
    debug(...data: any[]): void;
    info(...data: any[]): void;
    success(...data: any[]): void;
    warn(...data: any[]): void;
    error(...data: any[]): void;
    trace(...data: any[]): void;
    table(...data: any[]): void;
    custom(loggerCategory: string, ...data: any[]): void;
    /**
     * @internal
     * Logs data in Console
     * @param data - Data
     * @param loggerCategoryKey - Key/Name of Logger Category
     * @param consoleLogType - console[consoleLogProperty]
     */
    private invokeConsole;
    /**
     * @public
     * Creates new Logger Category
     * @param loggerCategory - Logger Category
     */
    createLoggerCategory(loggerCategory: LoggerCategoryInterface): void;
    /**
     * @public
     * Get Logger Category
     * @param key - Key/Name of Logger Category
     */
    getLoggerCategory(key: LoggerCategoryKey): LoggerCategoryInterface;
    /**
     * @public
     * Watches Logger and detects Logs
     * @param config - Config
     * @return Key of Watcher Function
     */
    watch(config: LoggerWatcherConfigInterface): string;
    /**
     * @public
     * Watches Logger and detects Logs
     * @param key - Key of Watcher Function
     * @param config - Config
     */
    watch(key: string, config: LoggerWatcherConfigInterface): this;
    /**
     * @public
     * Removes Watcher at given Key
     * @param key - Key of Watcher that gets removed
     */
    removeWatcher(key: string): this;
    /**
     * @public
     * Assigns new Level to Logger
     * NOTE: Default Levels can be found in 'Logger.level.x'
     * @param level - Level
     */
    setLevel(level: number): this;
}
export declare type LoggerCategoryKey = string | number;
export declare type LoggerKey = string | number;
/**
 * @param key - Key/Name of Logger Category
 * @param customStyle - Css Styles that get applied to the Logs
 * @param prefix - Prefix that gets written before each Log of this Category
 * @param level - Until which Level this Logger Category gets logged
 */
export interface LoggerCategoryInterface {
    key: LoggerCategoryKey;
    customStyle?: string;
    prefix?: string;
    level: number;
}
/**
 * @param prefix - Prefix that gets written before each log of this Logger
 * @param canUseCustomStyles - If custom Styles can be applied to the Logs
 * @param level - Handles which Logger Categories can be Logged
 * @param timestamp - Timestamp that ges written before each log of this Logger
 */
export interface LoggerConfigInterface {
    prefix: string;
    canUseCustomStyles: boolean;
    level: number;
    timestamp: boolean;
}
/**
 * @param prefix - Prefix that gets written before each log of this Logger
 * @param allowedTags - Only Logs that, contains the allowed Tags or have no Tag get logged
 * @param canUseCustomStyles - If custom Styles can be applied to the Logs
 * @param active - If Logger is active
 * @param level - Handles which Logger Categories can be Logged
 * @param timestamp - Timestamp that ges written before each log of this Logger
 */
export interface CreateLoggerConfigInterface {
    prefix?: string;
    allowedTags?: LoggerKey[];
    canUseCustomStyles?: boolean;
    active?: boolean;
    level?: number;
    timestamp?: boolean;
}
export declare type LoggerConfig = CreateLoggerConfigInterface | ((logger: Logger) => CreateLoggerConfigInterface);
export declare type ConsoleLogType = 'log' | 'warn' | 'error' | 'trace' | 'table' | 'info' | 'debug';
export declare type LoggerWatcherCallback = (loggerCategory: LoggerCategoryInterface, data: any[]) => void;
/**
 * @param callback - Callback Function that gets called if something gets Logged
 * @param level - At which level the watcher is called
 */
export interface LoggerWatcherConfigInterface {
    callback: LoggerWatcherCallback;
    level?: number;
}
